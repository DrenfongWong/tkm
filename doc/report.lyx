#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{tabu,longtable}
\usepackage{booktabs}

\definecolor{newyellow}{rgb}{1,1,0.8}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}

\newenvironment{typedefinition}[1]
{\begin{longtabu} to \textwidth {>{\tt}l>{\tt}r>{\it}X}
\caption{#1} \\
\toprule
\sf\bf Name & \sf\bf Size & \sf\bf Description \\
\midrule
}{\bottomrule
\end{longtabu}}
\newenvironment{vartypedefinition}[1]
{\begin{longtabu} to \textwidth {>{\tt}l>{\tt}r>{\tt}r>{\it}X}
\caption{#1} \\
\toprule
\sf\bf Name & \sf\bf Data & \sf\bf Size & \sf\bf Description \\
\midrule
}{\bottomrule
\end{longtabu}}
\newenvironment{constantdefinition}[1]
{\begin{longtabu} to \textwidth {>{\tt}l>{\tt}l>{\it}X}
\caption{#1} \\
\toprule\sf\bf Name & \sf\bf Hexvalue & \sf\bf Description \\
\midrule
}{\bottomrule
\end{longtabu}}
\newenvironment{exchangeparameters}[1]
{\begin{longtabu} to \textwidth{>{\tt}l>{\tt}l>{\it}X}
\caption{#1} \\
\toprule
\sf\bf Name & \sf\bf Type & \sf\bf Description \\
\midrule
}{\bottomrule
\end{longtabu}}
\newcommand{\hex}[1]{\textrm{0x#1}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "IKE Separation"
\pdf_author "Reto Buerki, Adrian-Ken Rüegsegger"
\pdf_subject "Extraction of security critical components into a Trusted Computing Base (TCB)"
\pdf_keywords "Separation, TCB, IPsec, IKE, IKEv2, Security, Ada"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\listings_params "backgroundcolor={\color{newyellow}},basicstyle={\ttfamily\small},breakautoindent=true,breaklines=true,captionpos=b,commentstyle={\color{colComments}},extendedchars=true,frame=single,identifierstyle={\color{colIdentifier}},keywordstyle={\color{colKeys}},language=Ada,numbers=left,numberstyle={\tiny},showspaces=false,showstringspaces=false,stringstyle={\color{colString}},tabsize=4"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
IKE Separation – Extraction of security critical components into a Trusted
 Computing Base (TCB)
\end_layout

\begin_layout Author
Reto Bürki, Adrian-Ken Rüegsegger
\end_layout

\begin_layout Standard
\align center
University of Applied Sciences Rapperswil (HSR), Switzerland
\end_layout

\begin_layout Abstract
The IPsec protocol relies on the correct operation of the IKE key exchange
 to meet its security goals.
 The implementation of the IKEv2 protocol is a non-trivial task and results
 in a large and complex code base.
 This makes it hard to gain a high degree of confidence in the correct operation
 of the code.
\end_layout

\begin_layout Abstract
The security and robustness of the IKEv2 implementation strongSwan has been
 augmented, by identifying and separating security critical from non-critical
 components and separating them into a minimal TCB.
 The TCB has been implemented using the Ada programming language.
\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistoflistings
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
This paper is organized as follows: The following overview section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Overview"

\end_inset

 provides an introduction into the concept and terms needed to understand
 the scope of this work.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Related-work"

\end_inset

 describes existing projects in the same field and section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Threat-model"

\end_inset

 explains the threat model the separation of the IKEv2 protocol is trying
 to solve.
 The section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Scope-of-this-doc"

\end_inset

 defines the scope of this work.
\end_layout

\begin_layout Standard
The chapter/section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

 evaluates the ...
 TODO
\end_layout

\begin_layout Standard
Maybe omit the subsection and write all here as text?
\end_layout

\begin_layout Section
Overview
\begin_inset CommandInset label
LatexCommand label
name "sub:Overview"

\end_inset


\end_layout

\begin_layout Standard
This section provides an overview about the terminology used in this project
 and explains the basic key concepts.
\end_layout

\begin_layout Subsection
Trusted Computing Base
\begin_inset CommandInset label
LatexCommand label
name "sub:Trusted-Computing-Base"

\end_inset


\end_layout

\begin_layout Standard
In a system with a high demand for security or integrity, functions relevant
 to guarantee this demand must be isolated from the rest of the system in
 a Trusted Computing Base (TCB)
\begin_inset Index idx
status open

\begin_layout Plain Layout
TCB
\end_layout

\end_inset

.
 To be trusted, this code must be as minimal as possible to allow (formal)
 verification of code correctness.
 In order to isolate code in a TCB, critical sections (of existing code
 or protocol) must be identified and the system must be separated into a
 critical (TCB) and non-critical (untrusted) part.
 Communication mechanisms between the sections must be established, which
 itself must be robust and well defined.
 If an attacker is able to compromise the untrusted-part of the system,
 the security and integrity functions guaranteed by the TCB must still be
 in place.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Trusted-Computing-Base"

\end_inset

 depicts an example system involving a TCB.
 Components colored in red specify trusted components inside the TCB.
 The TCB normally consists of multiple such components which implement different
, separated functionality.
 One or more untrusted components colored in black exchange data with the
 TCB over a well-defined interface.
 This coloring scheme is used throughout this document to label untrusted
 and untrusted components.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/trusted-untrusted.svg
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Trusted Computing Base
\begin_inset CommandInset label
LatexCommand label
name "fig:Trusted-Computing-Base"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
strongSwan
\begin_inset Index idx
status open

\begin_layout Plain Layout
strongSwan
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:strongSwan"

\end_inset


\end_layout

\begin_layout Standard
The strongSwan project is an OpenSource IPsec-based VPN solution for Unix-like
 operating systems.
 It provides the charon daemon, which is a feature-rich implementation of
 the Internet key exchange protocol version 2 (IKEv2
\begin_inset Index idx
status open

\begin_layout Plain Layout
IKEv2
\end_layout

\end_inset

) as specified in 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

.
 The software is implemented using the C programming language with an object
 oriented (OO) approach.
 This allows to emulate modern programming paradigms while still using a
 standard C compiler and tool set
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://wiki.strongswan.org/projects/strongswan/wiki/ObjectOrientedC
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The strongSwan architecture is very flexible and easy to extend with new
 features.
 Almost every part of the daemon works as a plugin and new functionality
 can be added by simply writing a new plugin.
 This architecture proved very helpful in this present project, as very
 few changes were required in the upstream strongSwan code to implement
 the Trusted Key Manager (TKM, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Trusted-Key-Manager"

\end_inset

) architecture.
\end_layout

\begin_layout Subsection
Ada
\begin_inset CommandInset label
LatexCommand label
name "sub:Ada"

\end_inset


\end_layout

\begin_layout Standard
Ada
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada
\end_layout

\end_inset

 is a structured, strongly typed programming language.
 The language has initially been designed by Jean Ichbiah from Honeywell
 Bull in the 1970s.
 Ada has a very similar structure to Pascal
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pascal
\end_layout

\end_inset

 and is often used for systems with a demand for security and integritiy
 or which have a huge code base.
\end_layout

\begin_layout Standard
The development of Ada was initiated by the US Department of Defense (DoD
\begin_inset Index idx
status open

\begin_layout Plain Layout
DoD
\end_layout

\end_inset

) in order to consolidate and supersede the hundreds of programming languages
 used in their countless projects.
 The new language should comply with all identified DoD requirements (dubbed
 
\begin_inset Quotes eld
\end_inset

Steelman Language Requirements
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Steelman78"

\end_inset

), which focused strongly on security and safety.
 
\end_layout

\begin_layout Standard
Ada was the first standardized high-level programming language 
\begin_inset CommandInset citation
LatexCommand cite
key "Ada83"

\end_inset

.
 The current version is Ada 2005
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada 2005
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:books/sp/Ada2006"

\end_inset

 which supports all modern programming pa\SpecialChar \-
ra\SpecialChar \-
digms.
 The next major version of the language is planned to be complete in 2012
 and will naturally be called Ada 2012
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada 2012
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Ada compilers, before used in practice, have to pass a standardized test
 suite which guarantees the compliance of the compiler with the Ada standard.
 Since Ada provides many features which aid in the development of safety
 and security critical applications, it is nowadays mostly used in such
 areas where these aspects are important.
 The primary industries making use of Ada are namely avionics, railway systems,
 banking, military and space technology.
\end_layout

\begin_layout Standard
The language is named after Lady Ada Lovelace (1815-1852), the daughter
 of Lord Byron
\begin_inset Foot
status open

\begin_layout Plain Layout
Ada Lovelace - http://en.wikipedia.org/wiki/Ada_Lovelace
\end_layout

\end_inset

 who is considered to be the first computer programmer.
\end_layout

\begin_layout Subsection
Trusted Key Manager
\begin_inset CommandInset label
LatexCommand label
name "sub:Trusted-Key-Manager"

\end_inset


\end_layout

\begin_layout Standard
The Trusted Key Manager
\begin_inset Index idx
status open

\begin_layout Plain Layout
Trusted Key Manager
\end_layout

\end_inset

 is a minimal TCB developed during this project which implements the identified
 security-critical functions of the IKEv2 protocol using the Ada programming
 language.
 It uses the tkm-rpc
\begin_inset Index idx
status open

\begin_layout Plain Layout
tkm-rpc
\end_layout

\end_inset

 library to communicate with the strongSwan charon daemon.
 The tkm-rpc library is also written in Ada, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:tkm-rpc-library"

\end_inset

.
\end_layout

\begin_layout Section
Related work
\begin_inset CommandInset label
LatexCommand label
name "sub:Related-work"

\end_inset


\end_layout

\begin_layout Section
Threat model
\begin_inset CommandInset label
LatexCommand label
name "sub:Threat-model"

\end_inset


\end_layout

\begin_layout Standard
It is assumed that the stringSwan charon IKEv2 daemon, which is considered
 an untrusted software component in the designed architecture, is under
 complete control of the attacker.
 This means the attacker has complete access to all data available to the
 IKEv2 daemon and can execute arbitrary code with the privileges of charon.
 As a result of this assumption, charon is not allowed to have access to
 any data classified as critical.
 Also intermediate values which are needed to create critical values MUST
 be protected from access by untrusted components.
\end_layout

\begin_layout Section
Scope of this project
\begin_inset CommandInset label
LatexCommand label
name "sub:Scope-of-this-doc"

\end_inset


\end_layout

\begin_layout Standard
What did we omit? OCSP, CRL
\end_layout

\begin_layout Chapter
Requirements
\begin_inset CommandInset label
LatexCommand label
name "sec:Requirements"

\end_inset


\end_layout

\begin_layout Standard
This section outlines the identified requirements of the separated system
 in detail.
 The following section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Security-requirements"

\end_inset

 specifies the security requirements, while section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Functional-requirements"

\end_inset

 covers the functional requirements.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Additional-requirements"

\end_inset

 describes additional requirements.
\end_layout

\begin_layout Section
Security requirements
\begin_inset CommandInset label
LatexCommand label
name "sub:Security-requirements"

\end_inset


\end_layout

\begin_layout Standard
The security requirements identified in this section specify the properties
 the TCB must enforce even in the event of a complete compromise of the
 untrusted part of the system (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Threat-model"

\end_inset

).
\end_layout

\begin_layout Subsection
Separation of key material
\begin_inset CommandInset label
LatexCommand label
name "sub:Separation-of-key"

\end_inset


\end_layout

\begin_layout Standard
The untrusted part of the IKEv2 component must not have access to generated
 key material that is used for authentication of peers, encryption and integrity
 protection of user data (i.e.
 child SA keys).
 This also includes critical intermediate values, which may result from
 the key generation and key derivation process.
 
\end_layout

\begin_layout Standard
Excluded from the critical material are the keys used to protect the IKE
 SA.
 See section TODO for details.
\end_layout

\begin_layout Subsection
Cryptographic operations
\end_layout

\begin_layout Standard
All relevant cryptographic operations must be performed by the trusted computing
 base (TCB) to assure the correctness of the resulting values.
 Since key material is needed to perform crypto operations, this is also
 a consequence of the requirement specified in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Separation-of-key"

\end_inset

.
\end_layout

\begin_layout Subsection
Authentication
\end_layout

\begin_layout Standard
The IKEv2 component must only allow IPSec SAs to be established for peers
 that have succesfully been authenticated.
 The authentication must be performed by the TCB to assure the correctnes
 of the process.
\end_layout

\begin_layout Standard
The authentication state in the TCB must always be unambiguously associated
 with the corresponding SA.
\end_layout

\begin_layout Subsection
Integrity
\end_layout

\begin_layout Standard
The security of the IKEv2 component must solely depend on the correct operation
 of the trusted part.
 The security operation of the system must not be violated by a misbehaving
 untrusted part.
\end_layout

\begin_layout Section
Functional requirements
\begin_inset CommandInset label
LatexCommand label
name "sub:Functional-requirements"

\end_inset


\end_layout

\begin_layout Standard
Functional requirements define what a system is trying to accomplish.
 This section ...
\end_layout

\begin_layout Subsection
Separation
\end_layout

\begin_layout Standard
The IKEv2 component must be separated into a trusted and untrusted part,
 to minimize the size and complexity of the TCB.
 The trusted part must enforce all security requirements specified in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Security-requirements"

\end_inset

.
\end_layout

\begin_layout Subsection
Communication
\end_layout

\begin_layout Standard
The communication protocol between the trusted and untrusted parts must
 be simple, robust and well-defined to allow a verifiable implementation.
 
\end_layout

\begin_layout Section
Additional requirements
\begin_inset CommandInset label
LatexCommand label
name "sub:Additional-requirements"

\end_inset


\end_layout

\begin_layout Chapter
Analysis of strongSwan
\end_layout

\begin_layout Standard
This section describes the current operation of the strongSwan charon IKEv2
 daemon.
 A deep understanding of these mechanisms is a prerequisite for the separation
 of the daemon in a trusted and untrusted part to achieve the requirements
 specified in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Section
IKEv2 protocol analysis
\begin_inset CommandInset label
LatexCommand label
name "sub:IKEv2-protocol-analysis"

\end_inset


\end_layout

\begin_layout Standard
The following section provides a detailed analysis of the IKEv2 message
 exchanges (as specified by 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

), focusing on the security relevance of the transmitted data.
 All communication using IKE consists of a request / response pair.
 
\end_layout

\begin_layout Standard
In the following descriptions, the payloads contained in the message are
 indicated by names as listed in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:IKEv2-payloads"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payload
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AUTH
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authentication
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CERT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Certificate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CERTREQ
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Certificate Request
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Configuration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EAP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extensible Authentication
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HDR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IKE header (not a payload)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDi 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification - Initiator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification - Responder
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Key Exchange
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ni, Nr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nonce
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notify
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Security Association
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Encrypted and Authenticated
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TSi
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Traffic Selector - Initiator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TSr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Traffic Selector - Responder
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
V
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vendor ID
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKEv2 payloads
\begin_inset CommandInset label
LatexCommand label
name "tab:IKEv2-payloads"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every IKE message contains a Message 
\begin_inset Formula $ID$
\end_inset

 as part of its fixed header (
\begin_inset Formula $HDR$
\end_inset

).
 This Message 
\begin_inset Formula $ID$
\end_inset

 is used to match up requests and responses, and to identify retransmissions
 of messages 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

.
 The fixed header does not contain information identified as critical, therefore
 the header is omitted from the discussion in the following sections.
 
\end_layout

\begin_layout Standard
A value is considered 'critical' if the untrusted part may not know it at
 all (i.e.
 is not allowed to be present in the untrusted parts memory region).
 Other payloads (such as 
\begin_inset Formula $AUTH$
\end_inset

) are calculated from critical values inside the TKM and then handed to
 the untrusted part.
\end_layout

\begin_layout Subsection
IKE_SA_INIT
\begin_inset CommandInset label
LatexCommand label
name "sub:proto-IKE_SA_INIT"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
IKE_SA_INIT
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first pair of messages (IKE_SA_INIT) negotiate cryptographic algorithms,
 exchange nonces, and do a Diffie-Hellman exchange 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{flalign}
Initiator\rightarrow Responder\; & HDR,SAi1,KEi,Ni
\end{flalign}

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $SAi1$
\end_inset

 payload states the cryptographic algorithms the initiator supports for
 the IKE SA.
 This payload is not considered critical since the TKM only supports a subset
 of cryptographic algorithms which are strong enough and believed to be
 secure.
 A misconfiguration of allowed proposals would only result in a not working
 configuration.
\end_layout

\begin_layout Standard
Child keys are derived from the SKEYSEED value resulting from the Diffie-Hellman
 exchange after the IKE_SA_INIT messages.
 Therefore the TKM MUST implement the DH protocol and provides the public
 
\begin_inset Formula $KE$
\end_inset

 payload to the untrusted part.
\end_layout

\begin_layout Standard
The nonce
\begin_inset Index idx
status open

\begin_layout Plain Layout
Nonce
\end_layout

\end_inset

 
\begin_inset Formula $Ni$
\end_inset

 is used as input to cryptographic functions and provides freshness to the
 key derivation technique used to obtain keys for the child SA, and to ensure
 creation of strong pseudorandom bits from the Diffie-Hellman key.
 Therefore, the nonce 
\begin_inset Formula $Ni$
\end_inset

 used in the initial exchange MUST be randomly chosen, MUST be at least
 128 bits in size, and MUST be at least half the key size of the negotiated
 pseudorandom function (PRF).
 The TKM MUST enforce these constraints.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{flalign}
Initiator\leftarrow Responder\; & HDR,SAr1,KEr,Nr,[CERTREQ]
\end{flalign}

\end_inset


\end_layout

\begin_layout Standard
Values created by the responder can not be controlled by the TKM, these
 values are taken as is.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Created by TKM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KEi, Ni
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Critical IKE_SA_INIT payloads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
IKE_AUTH
\begin_inset CommandInset label
LatexCommand label
name "sub:proto-IKE_AUTH"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
IKE_AUTH
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After the completion of the IKE_SA_INIT exchange, each party can generate
 SKEYSEED, from which all keys are derived for that IKE SA.
 The messages that follow are encrypted and integrity protected in their
 entirety, with the exception of the message headers.
 The keys used for the encryption and integrity protection are derived from
 SKEYSEED and are known as SK_e (encryption) and SK_a (authentication, a.k.a.
 integrity protection).
 A separate SK_e and SK_a is computed for each direction.
 The notation SK { ...
 } indicates that these payloads are encrypted and integrity protected using
 that direction's SK_e and SK_a (
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

, section 1.2).
\end_layout

\begin_layout Standard
The DH protocol is implemented in the TKM so the SK_e and SK_a keys must
 be provided to the untrusted part.
 The generated IKE keys 
\begin_inset Formula $SK$
\end_inset

 are not considered critical because an attacker taking over the untrusted
 part is already able to extract all information protected by these keys
 (see the threat model section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Threat-model"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{flalign}
\end_layout

\begin_layout Plain Layout

Initiator 
\backslash
rightarrow Responder
\backslash
; & HDR,SK
\backslash
{ IDi,[CERT,][CERTREQ,][IDr,]
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

& 
\backslash
hspace{2cm}AUTH,SAi2,TSi,TSr
\backslash
}
\backslash
nonumber
\end_layout

\begin_layout Plain Layout


\backslash
end{flalign}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The initiator asserts its identity with the 
\begin_inset Formula $IDi$
\end_inset

 payload.
 This value is not critical so it's directly configured using the standard
 strongSwan configuration mechanism.
 Nevertheless, the TKM must enforce correct identities to assure that only
 trusted identities are allowed.
 This is done during the authentication process.
\end_layout

\begin_layout Standard
The Authentication payload (
\begin_inset Formula $AUTH$
\end_inset

) contains data used for authentication purposes and is created by the TKM
 because it results from critical values.
 Only certificate-based authentication is supported (no PSK) and only the
 TKM MUST know the private key used to generate the AUTH signature.
 The AUTH payload is then handed to the untrusted part because the TKM assured
 that the PRF used to generate AUTH (see TODO) is strong enough.
\end_layout

\begin_layout Standard
\begin_inset Formula $SAi2$
\end_inset

 is not considered critical and can be configured directly in the untrusted
 part.
 The TKM enforces the correct algorithms before deriving child keys.
 The same is true for the 
\begin_inset Formula $TS$
\end_inset

 payloads.
 TODO CERT.
 The 
\begin_inset Formula $CERTREQ$
\end_inset

 payload can be used but makes no difference because the TKM currently trusts
 only one CA.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{flalign}
\end_layout

\begin_layout Plain Layout

Initiator 
\backslash
leftarrow Responder
\backslash
; & HDR,SK
\backslash
{IDr,[CERT,]
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

& 
\backslash
hspace{2cm}AUTH,SAr2, TSi, TSr
\backslash
}
\backslash
nonumber
\end_layout

\begin_layout Plain Layout


\backslash
end{flalign}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Payloads created by the responder can obviously not be controlled.
 The TKM enforces the selected algorithms before deriving child keys by
 consulting the policy.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Created by TKM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SK, AUTH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Enforced by TKM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID, CERT, CERTREQ, SAi, TS
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Critical IKE_AUTH payloads
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CREATE_CHILD_SA
\begin_inset CommandInset label
LatexCommand label
name "sub:proto-CREATE_CHILD_SA"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
CREATE_CHILD_SA
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{flalign}
Initiator\rightarrow Responder\; & HDR,SK\left\{ SA,Ni,[KEi],TSi,TSr\right\} 
\end{flalign}

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $SK$
\end_inset

 used to protect the CREATE_CHILD_SA exchange is the same as described in
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:proto-IKE_AUTH"

\end_inset

.
 The 
\begin_inset Formula $SK$
\end_inset

 is created by the TKM but handed to the untrusted part to protect the IKE
 exchanges from outside attackers.
 Attackers which have taken over the untrusted part are already able to
 extract all information protected by these keys.
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $SA$
\end_inset

 is again not considered critical and can be configured directly in the
 untrusted part.
 The TKM enforces the correct algorithms before deriving new child keys.
 The same is true for the 
\begin_inset Formula $TS$
\end_inset

 payloads.
\end_layout

\begin_layout Standard
Depending on the PRF configuration of the connection, the CREATE_CHILD_SA
 request MAY optionally contain a 
\begin_inset Formula $KE$
\end_inset

 payload for an additional Diffie-Hellman exchange to enable stronger guarantees
 of forward secrecy for the child SA.
 The keying material for the child SA is a function of SK_d established
 during the establishment of the IKE SA, the nonces exchanged during the
 CREATE_CHILD_SA exchange, and the Diffie-Hellman value (if KE payloads
 are included in the CREATE_CHILD_SA exchange) (
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

, section 1.3).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{flalign}
Initiator\leftarrow Responder\; & HDR,SK\left\{ SA,Nr,[KEr],TSi,TSr\right\} 
\end{flalign}

\end_inset


\end_layout

\begin_layout Standard
Payloads created by the responder can not be controlled but the algorithms
 selected from 
\begin_inset Formula $SA$
\end_inset

 and the traffic selectors selected from 
\begin_inset Formula $TS$
\end_inset

 MUST be checked by the TKM.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Created by TKM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SK, Ni, [KEi]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Enforced by TKM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SAi, TS
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Critical CREATE_CHILD_SA payloads
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Code analysis
\begin_inset CommandInset label
LatexCommand label
name "sub:Code-analysis"

\end_inset


\end_layout

\begin_layout Standard
This section illustrates the charon source code, which processes the IKEv2
 message and other security relevant data as described by section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:IKEv2-protocol-analysis"

\end_inset

.
 Graphs are used to illustrate the code flow which implement a certain functiona
lity and possibilities to interfere with the current design are explored.
 
\end_layout

\begin_layout Subsection
IKE_SA_INIT
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-IKE_SA_INIT"

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-establishment"

\end_inset

 shows the code involved in the IKE SA establishment.
 The exchange involves an initiator and a responder which are displayed
 in separate blocks in the graph.
 During IKE_SA_INIT two messages are exchanged which are indicated between
 the initiator and responder code blocks.
 Round labels, e.g.
 the label 
\emph on
(CD
\emph default
) are references to subgraphs which illustrate a continuative process in
 detail.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ike-sa-init.svg
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
IKE SA establishment
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-SA-establishment"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
IKE exchanges are implemented as task entities in charon and life in the
 
\family typewriter
libcharon/sa/ikev2/tasks
\family default
 directory.
 The IKE SA establishment process is implemented in the 
\family typewriter
ike_init.c
\family default
 file in this directory.
 The tasks are implemented as FSM
\begin_inset Foot
status open

\begin_layout Plain Layout
Finite-state machine
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
FSM
\end_layout

\end_inset

 which change state depending on internal or external events like received
 messages.
 The 
\family typewriter
NEED_MORE
\family default
 transition indicates that the state machine is expecting more data to proceed.
 This state separates the sending path from the receiving path inside the
 
\family typewriter
build_i/process_i
\family default
 and 
\family typewriter
process_r/build_r
\family default
 blocks of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-establishment"

\end_inset

.
 The tasks access required functionality by using requesting plugins from
 different factories.
 Examples of such plugins are RNGs
\begin_inset Foot
status open

\begin_layout Plain Layout
Random number generator
\end_layout

\end_inset

 or plugins which perform the DH exchange.
\end_layout

\begin_layout Standard
The initiator creates the payloads of the initial message in the 
\family typewriter
build_i
\family default
 code block during which the initial steps of the Diffie-Hellman protocol
 are performed.
 The task calls the 
\family typewriter
create_dh
\family default
 function of the 
\family typewriter
keymat
\family default
 object which internally requests a new DH plugin instance from the crypto
 factory and returns this instance to the calling task (
\emph on
CD
\emph default
).
 A 
\family typewriter
keymat
\family default
 object stores the complete IKE SA key material and is used to derive IKE
 and child SA keys.
 A 
\family typewriter
keymat
\family default
 object is always associated with an IKE SA inside the IKE SA manager.
\end_layout

\begin_layout Standard
After constructing all payloads, the initiator sends the IKE_SA_INIT message
 to the peer and waits for a response (error handling if no peer answers
 is omitted in this discussion).
 The responder processes the request in the 
\family typewriter
process_r
\family default
 code block and performs the DH protocol on his side.
 Since it already received the DH public value from the initiator, it is
 able to complete the DH exchange without waiting for further data.
 It then uses the SKEYSEED from the DH exchange to derive the IKE SA keying
 material (
\emph on
DK
\emph default
) and creates an IKE_SA_INIT response containing its DH public value to
 allow the initiator to complete the initial exchange on his side.
\end_layout

\begin_layout Standard
The initiator then also derives IKE SA keying material used to protect the
 following IKE_AUTH or CHILD_CREATE_SA exchanges (
\emph on
DK
\emph default
).
 This completes phase 1.
\end_layout

\begin_layout Subsection
IKE_AUTH
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-IKE_AUTH"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ike-auth.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA authentication
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-SA-authentication"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-authentication"

\end_inset

 shows the code involved during the authentication of an IKE SA.
 This exchange is more complex than the IKE_SA_INIT exchange, that's the
 reason why the graph contains seven subgraphs, including the one depicted
 in the separate figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-Certificate-trustchain"

\end_inset

 which illustrates the trustchain verification code flow.
 The subgraphs cross-reference themselves which is again indicated by round
 labels.
\end_layout

\begin_layout Standard
The initiator begins the exchange by building it's own AUTH payload used
 to prove his identity to the responder.
 This is done by creating a so called 'authenticator' (see the 
\emph on
CB
\emph default
 label) which is again implemented as a plugin.
 After that, the authenticator's 
\family typewriter
build
\family default
 function is called which is illustrated by the 
\emph on
BA
\emph default
-subgraph shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-public-key-auth"

\end_inset

.
 To construct the signed AUTH octets the authenticator plugin requests a
 private key (
\emph on
GP
\emph default
) matching a specific certificate configured for this connection.
 The returned private key is used to sign the AUTH octets requested from
 the keymat object (
\emph on
A8
\emph default
) of the associated IKE SA and is again implemented in a plugin.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ike-auth-ba-pa.svg
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE public key authenticators
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-public-key-auth"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
It then sends a message containing the constructed payloads to the responder
 and waits for a response message (error handling omitted).
\end_layout

\begin_layout Standard
The responder creates a 'verifier' plugin to check the AUTH payload extracted
 from the initiator's message.
 The creation of a verifier plugin is depicted in the 
\emph on
CV
\emph default
 graph.
 It then processes the AUTH octets of the initiator by calling the verifier's
 
\family typewriter
process
\family default
 function (
\emph on
PA
\emph default
).
 The authenticator requests the AUTH octets from the IKE SA keymat (
\emph on
A8
\emph default
) and retrieves the associated public key needed to verfiy the signature
 from the credential manager.
 To use the public key, it's chain of trust must be verified.
 
\end_layout

\begin_layout Standard
The trustchain verification process is shown in (
\emph on
PU
\emph default
) of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-Certificate-trustchain"

\end_inset

.
 The credential manager iterates over all certificates linked with the public
 key until it reaches a trusted CA certificate.
 TODO: explain more
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ike-auth-pu.svg
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
IKE Certificate trustchain verification
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-Certificate-trustchain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create the response message, the responder performs the same steps as
 the initiator to create it's AUTH payload (
\emph on
CB
\emph default
, 
\emph on
BA
\emph default
).
 The initiator verifies the AUTH payload of the responder using the same
 steps as described for the responder (
\emph on
CV
\emph default
, 
\emph on
PA
\emph default
).
\end_layout

\begin_layout Standard
After the IKE SA is established, both peers normally install the first child
 SA.
 This step is omitted and explained in detail in the next section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flow-CHILD_CREATE_SA"

\end_inset

.
\end_layout

\begin_layout Subsection
CHILD_CREATE_SA
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-CHILD_CREATE_SA"

\end_inset


\end_layout

\begin_layout Standard
The CHILD_CREATE_SA exchange is implemented as task in the 
\family typewriter
child_create.c
\family default
 file.
 The initiator starts by collecting the traffic selectors and proposals
 from the configuration (not visible in the graph) and allocates a SPI by
 calling the 
\family typewriter
allocate_spi
\family default
 function.
 This function dispatches into the registered kernel plugin to acquire a
 free SPI from the OS kernel.
 If the connection has PFS
\begin_inset Foot
status open

\begin_layout Plain Layout
Perfect forward secrecy
\end_layout

\end_inset

 enabled, the initiator starts a new DH exchange and builds all required
 payloads.
 After sending the message, the task changes it's state to NEED_MORE and
 waits for an answer.
\end_layout

\begin_layout Standard
The responder processes the received CHILD_CREATE_SA message and extracts
 the contained payloads.
 It conducts the DH exchange and then directly installs the derived child
 SA keying material in the kernel.
 The complete process of deriving keys for the new child SA is depicted
 in 
\emph on
(SI
\emph default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/child-create-sa.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Child SA establishment
\begin_inset CommandInset label
LatexCommand label
name "fig:Child-SA-establishment"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
First the child SA data structure associated with the task is set into the
 CHILD_INSTALLING state.
 The derive_child_keys function of the keymat is called to derive keying
 material for the child SA (
\emph on
DC
\emph default
).
 The kernel plugin's add_policy (
\emph on
IP
\emph default
) and add_sa (
\emph on
IS
\emph default
) functions are used to install the new policy and state into the kernel's
 SPD and SAD databases.
 If no errors occured, the state of the child SA is set to CHILD_INSTALLED
 and it it attached to the associated IKE SA object.
\end_layout

\begin_layout Standard
The responder then builds the payloads of the response message and sends
 it back to the initiator.
 The initiator processes the message and after extracting the payloads,
 it calls the select_and_install function to derive child keying material
 and install the new policy and state in the kernel.
\end_layout

\begin_layout Subsection
Source of randomness
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-Source-of-randomness"

\end_inset


\end_layout

\begin_layout Standard
Randomness is provided by requesting a random number generator plugin instance
 (
\family typewriter
rng_t
\family default
) from the crypto factory of libstrongswan.
 This process is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Nonce-generation"

\end_inset

 using the example of creating new nonces.
 As explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:proto-IKE_SA_INIT"

\end_inset

, nonces are used to guarantee freshness in the key derivation process and
 must be created using a good random source (TODO: explain good?).
\end_layout

\begin_layout Standard
Depending on the requested quality (RNG_WEAK or RNG_STRONG) a suitable RNG
 plugin providing the needed quality is created and returned to the caller
 by the crypto factory.
\end_layout

\begin_layout Standard
\align left
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/nonce-generation.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Nonce generation
\begin_inset CommandInset label
LatexCommand label
name "fig:Nonce-generation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Payload encryption
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-Payload-encryption"

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-payload-enc"

\end_inset

 schematically shows the code involved in the encryption of payloads in
 the IKE message exchanges.
 If a new connection is initiated by calling the initiate function of the
 IKE SA, all tasks (see previous sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flow-IKE_SA_INIT"

\end_inset

 to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flow-CHILD_CREATE_SA"

\end_inset

) required to establish an IKE SA and the associated child SA are created
 and run by the task manager.
 The tasks then callback to the IKE SA 
\family typewriter
generate_message
\family default
 function to create the message sent to the peer in their exchange.
\end_layout

\begin_layout Standard
The 
\family typewriter
generate_message
\family default
 function calls the 
\family typewriter
generate
\family default
 function of the message which in turn checks if the message is required
 to be encrypted.
 If encryption is enabled, an encrypted payload is created by accessing
 the key material of the IKE SA's 
\family typewriter
keymat
\family default
 object.
 The actual encryption is done by a crypter plugin which in turn uses an
 RNG plugin to retrieve random bytes needed for the IV
\begin_inset Foot
status open

\begin_layout Plain Layout
Initialization vector
\end_layout

\end_inset

.
 TODO: explain AEAD
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/payload-encryption.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA payload encryption
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-SA-payload-enc"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Payload decryption
\begin_inset CommandInset label
LatexCommand label
name "sub:flow-Payload-decryption"

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-payload-dec"

\end_inset

 shows the process of payload decryption which reverses the process of payload
 encryption explained in the previous chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flow-Payload-encryption"

\end_inset

.
 An incoming message is processed by calling the task managers 
\family typewriter
process_message
\family default
 function.
 This function parses the message by calling the message 
\family typewriter
parse_body
\family default
 function with the keymat object from the IKE SA as function argument.
\end_layout

\begin_layout Standard
The 
\family typewriter
parse_body
\family default
 function calls 
\family typewriter
decrypt_payloads
\family default
 which determines if the payloads are encrypted or not.
 If they are, it decrypts them by using an encryption payload object which
 uses the keymat's keying material to decrypt and verify the payloads.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/payload-decryption.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA payload decryption
\begin_inset CommandInset label
LatexCommand label
name "fig:IKE-SA-payload-dec"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Security-critical functionality
\end_layout

\begin_layout Standard
TODO: remove this section?
\end_layout

\begin_layout Standard
This section maps the identified security requirements defined in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Security-requirements"

\end_inset

 to the concrete architecture of strongSwan outlined in the previous subsections.
\end_layout

\begin_layout Subsection
Key agreement (DH)
\end_layout

\begin_layout Standard
No key material must be present in the untrusted part of the system ...
 outline which values are especially important (Xa etc).
\end_layout

\begin_layout Subsection
Nonce generation
\end_layout

\begin_layout Standard
Nonces play an important role and guarantee freshness.
 TODO: explain.
 The TCB must guarantee the freshness of the local nonce.
\end_layout

\begin_layout Subsection
Handling of key material (creation/storage)
\end_layout

\begin_layout Standard
also intermediate values.
 Howto store them? Wipe and lock memory, limitations (does not work well
 -> use better mechanisms)
\end_layout

\begin_layout Paragraph
IKE keys: not critical, explain why
\end_layout

\begin_layout Subsection
Random numbers
\end_layout

\begin_layout Subsection
Cryptographic operations
\end_layout

\begin_layout Standard
sections about the ops, also signature verification
\end_layout

\begin_layout Subsection
Enforcement of policy
\end_layout

\begin_layout Standard
Only configured policy allowed, crypto ops must be strong enough -> at the
 moment no problem.
 we implement only a subset.
\end_layout

\begin_layout Chapter
Design
\end_layout

\begin_layout Standard
The main concept is to separate the security relevant services from all
 other IKEv2 services and split the IKEv2 key management daemon into two
 components: a trusted and an untrusted part.
 The trusted part performs the critical services, stores all relevant keying
 material and exposes the necessary services to the untrusted component
 via a well defined and minimal interface.
 The split of the components must guarantee the fullfilment of the security
 requirements defined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Section
Split of IKE
\end_layout

\begin_layout Standard
The charon software design is based on a plugin architecture.
 Almost every functional part of the daemon is implemented as a plugin.
 This provides the flexibility to extend or exchange specific parts of the
 system.
 As outlined in the code analysis section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Code-analysis"

\end_inset

, most security critical operations and values are already encapsulated
 in plugins.
 The changes needed to allow complete separation of the critical parts from
 the charon daemon are limited.
 Therefore, the architecture depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Split-of-IKE"

\end_inset

 is proposed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/design-overview.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Split of IKE into trusted and untrusted parts
\begin_inset CommandInset label
LatexCommand label
name "fig:Split-of-IKE"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
By implementing custom plugins which act as proxy between the trusted and
 untrusted parts of the component, it is possible to move the key material
 and related operations into the TCB.
 This ensures that the untrusted part has no direct access to security relevant
 data.
 The critical parts extracted from charon are implemented by the trusted
 key manager which is part of the TCB.
 
\end_layout

\begin_layout Standard
By using a well-defined interface, the internal functionality of the TCB’s
 key manager is completely hidden from the charon plugins.
 The plugins reference the data (and their associated state) needed for
 processing via context identifiers.
 They have no direct access to the objects referenced by the identifiers
 but can instruct the key manager to perform certain, allowed operations
 with the specified context(s).
 Only uncritical results of operations are returned to the caller plugin
 (e.g.
 the public value of a DH exchange).
 This architecture allows the trusted part to be minimal while the bulk
 of the charon code can be used as is, in the untrusted part to handle the
 vast majority of IKEv2 processing.
\end_layout

\begin_layout Standard
TODO: make context/ID handling a sep.
 section? explain upper limit of ID
\end_layout

\begin_layout Section
Security goals
\end_layout

\begin_layout Subsection
Assumptions
\end_layout

\begin_layout Standard
IKE and TKM can only exchange messages via the well defined interface and
 are otherwise completely isolated from each other.
 In a real system this is very difficult to achieve since there are many
 possibilities for side channels, which have been demonstrated to work,
 see for example 
\begin_inset CommandInset citation
LatexCommand cite
key "cryptoeprint:2010:594"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Zhang:2012:CSC:2382196.2382230"

\end_inset

 or 
\begin_inset CommandInset citation
LatexCommand cite
key "Aciicmez:2007:PSB:1229285.1266999"

\end_inset

.
 TODO: explain why this is out of scope and how this could be solved (e.g.
 SK, special algos for crypto).
\end_layout

\begin_layout Section
TKM Functionality
\end_layout

\begin_layout Subsection
Nonce generation
\end_layout

\begin_layout Subsection
Diffie Hellman
\end_layout

\begin_layout Subsection
Key derivation
\end_layout

\begin_layout Standard
Only aes256-sha512 atm
\end_layout

\begin_layout Subsection
Signature generation
\end_layout

\begin_layout Subsection
Signature verification
\end_layout

\begin_layout Subsection
Certificate chain validation
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/trustchain-validation-overview.svg
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TKM trustchain validation overview
\begin_inset CommandInset label
LatexCommand label
name "fig:TKM-trustchain-validation-overview"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/trustchain-validation-set-user.svg
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TKM trustchain set user certificate
\begin_inset CommandInset label
LatexCommand label
name "fig:TKM-trustchain-set-user"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/trustchain-validation-add-cert.svg
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TKM trustchain add certificates
\begin_inset CommandInset label
LatexCommand label
name "fig:TKM-trustchain-add-certs"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/trustchain-validation-check-ca.svg
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TKM trustchain check CA
\begin_inset CommandInset label
LatexCommand label
name "fig:TKM-trustchain-check-ca"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Derivation of key material
\end_layout

\begin_layout Chapter
TKM interface
\end_layout

\begin_layout Section
Protocol overview
\end_layout

\begin_layout Subsection
Creation of an IKE SA
\end_layout

\begin_layout Subsection
Creation of a Child SA
\end_layout

\begin_layout Subsection
Rekeying of an IKE SA
\end_layout

\begin_layout Subsection
Rekeying of a Child SA
\end_layout

\begin_layout Section
Data types and constants
\end_layout

\begin_layout Standard
This section presents the data types and constants that are used in the
 description of the TKM interface.
\end_layout

\begin_layout Subsection
Integer types
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/types-integer.tex"

\end_inset


\end_layout

\begin_layout Subsection
Variable octet types
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/types-varoctets.tex"

\end_inset


\end_layout

\begin_layout Subsection
Constants
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/types-constants.tex"

\end_inset


\end_layout

\begin_layout Section
State machines
\end_layout

\begin_layout Subsection
Nonce 
\end_layout

\begin_layout Subsection
Diffie Hellman
\end_layout

\begin_layout Subsection
Certificate chain
\end_layout

\begin_layout Subsection
Authenticated endpoint
\end_layout

\begin_layout Subsection
IKE SA
\end_layout

\begin_layout Subsection
Child SA
\end_layout

\begin_layout Section
Exchanges
\end_layout

\begin_layout Standard
This section describes all exchanges of the different TKM interfaces.
\end_layout

\begin_layout Subsection
IKE Exchanges
\end_layout

\begin_layout Standard
All the following exchanges are used by IKE to communicate with the TKM
 and perform operations related IKE or ESP SA establishment.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-nc_create.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-nc_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-dh_create.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-dh_generate_key.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-dh_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-cc_set_user_certificate.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-cc_add_certificate.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-cc_check_ca.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-cc_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-ae_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-isa_create.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-isa_sign.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-isa_auth.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-isa_create_child.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-isa_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-esa_create_first.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-esa_create.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-esa_create_no_pfs.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-esa_select.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-esa_reset.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-tkm_version.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-tkm_limits.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "tex/interface-IKE-tkm_reset.tex"

\end_inset


\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Section
XML-Specification
\end_layout

\begin_layout Standard
How is the protocol between charon and TKM specified? Example section, exchanges
, types etc.
 How is this specification used to create doc/code/fsm/graphs.
 examples.
 Ada 2012 aspects, gnatprove and spark integration
\end_layout

\begin_layout Section
RPC: tkm-rpc library
\begin_inset CommandInset label
LatexCommand label
name "sub:tkm-rpc-library"

\end_inset


\end_layout

\begin_layout Standard
What is tkm-rpc? How is it used by the components? How are the code files
 generated? example code on usage.
 Finite statemachines with pre/postcons.
 exception on violation
\end_layout

\begin_layout Standard
explain the stream dispatcher generic.
\end_layout

\begin_layout Section
charon-tkm
\end_layout

\begin_layout Standard
The untrusted IKEv2 component used in conjunction with the trusted key manager
 infrastructure is implemented as a separate charon 'instance' in it's own
 directory below the strongSwan top-level source directory (
\family typewriter
src/charon-tkm
\family default
).
 This has the advantage that the TKM code is contained and does not mix
 with other strongSwan files.
 The charon-tkm binary startup code works like the already existing charon-nm
 instance, a special charon daemon variant to be used with the GNOME NetworkMana
ger project
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://projects.gnome.org/NetworkManager/
\end_layout

\end_inset


\end_layout

\end_inset

.
 The only difference is the registration of custom TKM plugins as final
 step in the startup phase.
 The charon-tkm daemon does not rely on the dynamic plugin loading mechanism
 for it's core plugins, they are statically registered before entering the
 main processing loop.
\end_layout

\begin_layout Standard
Since the charon-tkm code uses the tkm-rpc library written in Ada, the daemon
 has to be built using an Ada-aware toolchain.
 This integration of Ada code into the strongSwan codebase is explained
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-Ada-integration"

\end_inset

.
 Apart from the library, the ESP SA event service and the special exception
 handler component are directly written in Ada inside the charon-tkm project
 itself.
 These subsystems are outlined in sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-EES-Service"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-Exception-handler-(EH)"

\end_inset

.
\end_layout

\begin_layout Subsection
Ada integration
\begin_inset CommandInset label
LatexCommand label
name "sub:charon-Ada-integration"

\end_inset


\end_layout

\begin_layout Standard
As explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:tkm-rpc-library"

\end_inset

, the tkm-rpc library is written in pure-Ada and uses the export feature
 of Ada (
\family typewriter
pragma
\family default
 Export) to make procedures available to the charon-tkm C code.
 To call Ada code from C requires an initialized Ada runtime (ZFP case ignored),
 that's why the special 
\family typewriter
adainit
\family default
 and 
\family typewriter
adafinal
\family default
 procedures must be called before and after Ada code is used.
 Setup and teardown of the Ada runtime is handled by the tkm-rpc library
 (tkmlib_init/tkmlib_final) but still imposes the requirement that the charon-tk
m code must be compiled with an Ada-aware toolchain to correctly compile,
 bind and link the daemon binary.
 TODO: explain why in detail.
\end_layout

\begin_layout Standard
strongSwan uses the GNU build system, also known as the Autotools
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/GNU_build_system
\end_layout

\end_inset


\end_layout

\end_inset

, to configure, compile and install the project.
 Ada projects using the GNAT Ada compiler normally use gnatmake or gprbuild
\begin_inset Foot
status open

\begin_layout Plain Layout
GNAT's Project Manager
\end_layout

\end_inset

 to build projects.
 Luckily these concepts are easily mixed by calling the respective GNAT
 project manager from inside a Makefile.
 The charon-tkm project provides a Makefile.am file which describes how to
 build the charon-tkm binary with gprbuild.
 The project uses the more advanced gprbuild manager because it provides
 improved support for mixed language projects (C and Ada in this case).
\end_layout

\begin_layout Subsection
Initialization
\end_layout

\begin_layout Standard
Before entering the main loop, the charon-tkm daemon calls the 
\family typewriter
tkm_init
\family default
 function implemented in 
\family typewriter
tkm.c
\family default
.
 This function initializes the tkm-rpc library explained above and also
 starts the exception handler (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-Exception-handler-(EH)"

\end_inset

) used to catch Ada exceptions.
\end_layout

\begin_layout Standard
It then calls the 
\family typewriter
ike_init
\family default
 function to connect to the IKE interface of the TKM.
 After that the ESP SA event service is started which accepts ESA acquire
 and expire events from clients (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-EES-Service"

\end_inset

).
 If no error occurred (which would result in the termination of the daemon),
 the initialization code instructs the TKM inside the TCB to reset itself
 to a pristine state by calling the 
\family typewriter
ike_tkm
\family default
_reset function.
 
\end_layout

\begin_layout Standard
Since the TKM supports a static number of contexts (see TODO), the upper
 limit of context IDs is requested from the TKM.
 This limit configuration is then passed on to the TKM ID manager which
 is initialized as final step along with the TKM chunk map.
\end_layout

\begin_layout Subsection
ID manager
\begin_inset CommandInset label
LatexCommand label
name "sub:ID-manager"

\end_inset


\end_layout

\begin_layout Standard
The TKM ID manager handles the management of the different context ID kinds.
 It's interface is very simple.
 The 
\family typewriter
acquire_id
\family default
 function can be used to acquire (reserve) a new ID for a given context
 (e.g.
 
\family typewriter
TKM_CTX_DH
\family default
 for a new DH context ID).
 The 
\family typewriter
release_id
\family default
 function releases an already reserved ID.
 If no ID can be acquired because no one is available, the 
\family typewriter
acquire_id
\family default
 function indicates this error by returning zero.
 The first valid ID of a given context always starts at one.
\end_layout

\begin_layout Subsection
Chunk map
\begin_inset CommandInset label
LatexCommand label
name "sub:Chunk-map"

\end_inset


\end_layout

\begin_layout Standard
The TKM code uses two main techniques to pass on information from one plugin
 to another for cases where the strongSwan interface is not prepared to
 handle the use case.
 These two techniques allowed to implement the required TKM functionality
 without being to invasive to the upstream strongSwan codebase.
 This is especially true for use cases which are only relevant for the TKM
 project with no benefit for the project as a whole.
\end_layout

\begin_layout Standard
One of these mechanisms uses a chunk map, the other is explained in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Piggybacking"

\end_inset

.
 The chunk map can be used to store mappings of context IDs to chunks (which
 are chunks of binary data such as nonces or cryptographic keys).
 This is required to preserve context ID information over plugin borders.
 If for example the nonce plugin allocates a new nonce in a new context,
 this relation has to be stored because the strongSwan interfaces have no
 knowledge of context IDs, such IDs are only used inside the TKM code.
 Therefore, the nonce plugin would store the chunk to context ID relation
 in the chunk map.
 Another plugin which receives the nonce chunk (which is random enough to
 be unique) is able to retrieve the associated context ID by consulting
 the chunk map.
\end_layout

\begin_layout Subsection
Piggybacking
\begin_inset CommandInset label
LatexCommand label
name "sub:Piggybacking"

\end_inset


\end_layout

\begin_layout Standard
Another method of passing TKM specific information over plugin borders uses
 a piggybacking technique to store informational structs inside chunk (chunk_t)
 objects.
 strongSwan often treats such chunks as opaque values while passing them
 between plugins.
 This allows to store information like context IDs in it for other plugins
 which need this information to initiate an action with the TKM.
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:isa_info_t-struct"

\end_inset

 shows the 
\family typewriter
isa_info_t
\family default
 informational structure used to transfer ISA information from the keymat
 of a parent SA to the keymat of the new IKE SA while rekeying.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

struct isa_info_t {
\end_layout

\begin_layout Plain Layout

	/** 	 
\end_layout

\begin_layout Plain Layout

     * Parent isa context id.
 	 
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

     isa_id_type parent_isa_id;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/**
\end_layout

\begin_layout Plain Layout

	 * Authenticated endpoint context id.
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

     ae_id_type ae_id;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
isa_info_t struct
\begin_inset CommandInset label
LatexCommand label
name "lis:isa_info_t-struct"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For this purpose the skd data chunk returned by the 
\family typewriter
get_skd
\family default
 function is used.
 This is possible since the sk_d chunk is treated as an opaque value and
 handed to the 
\family typewriter
derive_ike_keys
\family default
 procedure of the new keymat as-is without  any processing.
 The information is stored in the skd chunk as shown by listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Piggybacking"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

isa_info_t *isa_info;
\end_layout

\begin_layout Plain Layout

INIT(isa_info,
\end_layout

\begin_layout Plain Layout

     .parent_isa_id = this->isa_ctx_id,
\end_layout

\begin_layout Plain Layout

     .ae_id = this->ae_ctx_id,
\end_layout

\begin_layout Plain Layout

);  
\end_layout

\begin_layout Plain Layout

*skd = chunk_create((u_char *)isa_info, sizeof(isa_info_t)); 
\begin_inset Caption

\begin_layout Plain Layout
Piggybacking
\begin_inset CommandInset label
LatexCommand label
name "lis:Piggybacking"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nonce generation plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Nonce-generation-plugin"

\end_inset


\end_layout

\begin_layout Standard
Nonce generation plugins are a new feature of strongSwan introduced during
 this project.
 A nonce generation plugin is responsible to create new nonces needed in
 the IKE_SA_INIT and CHILD_CREATE_SA exchanges (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:proto-IKE_SA_INIT"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:proto-CREATE_CHILD_SA"

\end_inset

).
 In case of the TKM, the nonce generation plugin requests a new nonce from
 the TKM by calling the 
\family typewriter
ike_nc_create
\family default
 RPC and then registers the nonce in the chunk map to store the nonce to
 context ID mapping.
 This mapping is used by other plugins which need to pass on a nonce context
 to the TKM for key derivation purposes.
\end_layout

\begin_layout Subsection
Diffie-Hellman plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Diffie-Hellman-plugin"

\end_inset


\end_layout

\begin_layout Standard
The TKM Diffie-Hellman plugin instructs the TKM to perform the DH protocol.
 On creation, the plugin calls the 
\family typewriter
ike_dh_create
\family default
 RPC with a new context ID acquired from the ID manager.
 This initiates the initial steps of the Diffie-Hellman protocol in the
 TKM.
 The plugin completes the DH exchange by calling the 
\family typewriter
ike_dh_generate_key
\family default
 function as soon it receives the public value when it's 
\family typewriter
set_other_public_value
\family default
 function is called as illustrated by figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-SA-establishment"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Child-SA-establishment"

\end_inset

.
 No secret values leave the TCB at any time but the DH context stored in
 the TKM can be referenced later for key derivation by using the correct
 DH context ID.
\end_layout

\begin_layout Subsection
Private key plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Private-key-plugin"

\end_inset


\end_layout

\begin_layout Standard
The TKM private key plugin instructs the TKM to create and return the AUTH
 octet signature for a given ISA context.
 Since the code flow of the signature creation process involves two different
 plugins, namely the keymat and the private key plugin, information must
 be passed between these plugins.
 The AUTH octet chunk returned by the keymat's 
\family typewriter
get_auth_octets
\family default
 function is piggybacked in this case.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Piggybacking"

\end_inset

 for an explanation of the piggybacking mechanism.
 The TKM keymat stores the associated ISA context ID and the initial message
 in the chunk and returns it to the caller, which is a pubkey authenticator
 in this case (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-public-key-auth"

\end_inset

).
 The public key authenticator then calls the sign operation of the private
 key plugin.
 The private key code extracts the stored data and calls the
\family typewriter
 ike_isa_sign
\family default
 operation to create the AUTH octet signature.
 The signature is then returned to the caller.
\end_layout

\begin_layout Standard
In its current implementation, the TKM private key plugin is hardcoded to
 a specific keypair (alice@strongswan.org used for strongSwan integration
 testing).
 The reason for this limitation lies in the way the code is searching for
 a matching private key to authenticate a connection.
 It uses the key fingerprint (which is encoded from the key's modulus and
 public exponent values) of a public key contained in the user certificate
 configured for a connection to find the corresponding private key.
 Since no real private key exists in the TKM-case because the private key
 never leaves the TCB, the TKM private key plugin must imitate a key fingerprint
 to be found.
\end_layout

\begin_layout Standard
The TKM private key handling must be rewritten at a later stage using a
 TKM specific credential set which provides an own implementation of a private
 key enumeration function (
\family typewriter
create_private_enumerator
\family default
 of 
\family typewriter
credential_set_t
\family default
).
 This way a configured private key could be fetched and installed in the
 credential manager on demand.
\end_layout

\begin_layout Subsection
Public key plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Public-key-plugin"

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IKE-public-key-auth"

\end_inset

 shows how the AUTH octet signature received from a peer is verified.
 Since the verification is done in the TKM, a dummy public key plugin must
 be provided which fakes the verification process in the untrusted part.
\end_layout

\begin_layout Standard
To make sure charon always uses the TKM public key plugin when processing
 public keys, it is registered first during daemon startup.
\end_layout

\begin_layout Subsection
Keymat plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Keymat-plugin"

\end_inset


\end_layout

\begin_layout Standard
The charon-tkm code uses the new keymat registration facility developed
 during this project to register a special TKM keymat variant, which acts
 as proxy for the remote keying material stored in the TKM.
 The keymat is constructed together with an IKE SA and stays active for
 the lifetime of the SA.
 Upon construction, the TKM keymat plugin acquires an ISA context ID (
\family typewriter
TKM_CTX_ISA
\family default
) from the ID manager.
 It then behaves like the standard IKEv2 keymat, except that it does not
 store or receive any critical data.
 Calls to 
\family typewriter
derive_ike_keys
\family default
 and 
\family typewriter
derive_child_keys
\family default
 are dispatched into the TCB by using context IDs.
 The keys used to protect the IKE SA are returned to the keymat because
 they are not classified as critical (see section TODO).
\end_layout

\begin_layout Standard
The keymat plugin uses the piggybacking mechanism described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Piggybacking"

\end_inset

 to forward information to other plugins or to extract required information
 from other sources.
 For example the 
\family typewriter
derive_child_keys
\family default
 function does nothing more than using the encryption key chunks to store
 information needed in the kernel IPsec plugin explained in the next section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Kernel-IPsec-interface-plugin"

\end_inset

.
 The actual child key derivation is postponed until the registered kernel
 plugin's 
\family typewriter
add_sa
\family default
 function is called by the task which takes care of child creation, see
 figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Child-SA-establishment"

\end_inset

 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Child-SA-establishment"

\end_inset

 labels (
\emph on
SI
\emph default
) and (
\emph on
IS
\emph default
).
\end_layout

\begin_layout Subsection
Kernel IPsec interface plugin
\begin_inset CommandInset label
LatexCommand label
name "sub:Kernel-IPsec-interface-plugin"

\end_inset


\end_layout

\begin_layout Standard
After keying material for a new child SA has been derived in the TKM, the
 child SA state must be established by using a kernel IPsec plugin.
 In the case of the TKM where no child keying material leaves the TCB and
 child SA policy handling is completely done by the TKM, the kernel plugin
 can be kept very simple.
 It only provides a custom 
\family typewriter
add_sa
\family default
 function used to instruct the TKM to derive child keys and install a new
 ESA (ESP SA) state inside the TCB's encrypter component.
 This is of course only possible if all preconditions for this operation
 are met.
\end_layout

\begin_layout Subsection
Bus listener plugin
\end_layout

\begin_layout Standard
To inform charon about the authorization result from the TKM, a mechanism
 called authorization hooks is used.
 The TKM bus listener plugin registers itself as listener for IKE messages
 and is consulted in the final step of the authorization round whether the
 peer has been correctly authorized.
\end_layout

\begin_layout Standard
The message hook is needed to extract the authorization payload from the
 incoming IKE_AUTH message from the peer and to store it in the keymat of
 the corresponding IKE SA this exchange is currently performed.
 This is done by calling the custom TKM keymat function 
\family typewriter
set_auth_payload
\family default
.
 Later this payload is used in the authorize hook of the bus listener hook
 to instruct the TKM to perform the authentication process in the TCB.
\end_layout

\begin_layout Standard
The authorize hook retrieves the keymat by using the associated IKE SA object
 received as function argument.
 It then allocates a new certificate chain context ID and calls the internal
 
\family typewriter
build_cert_chain
\family default
 function to construct the certificate trust chain of the received peer
 certificate.
 The peer's user certificate stored in the authentication configuration
 of the associated IKE SA is set as user certificate for this CC context
 in the TKM by calling the 
\family typewriter
ike_cc_set_user_certificate
\family default
 function.
 This is the certificate for which trust must be established.
 For all intermediate certificates, the 
\family typewriter
build_cert_chain
\family default
 function calls the TKM 
\family typewriter
ike_cc_add_certificate
\family default
 RPC.
 The TKM verifies the trust chain as explained in TODO.
 At the end the CA certificate of the chain in question is passed on to
 the TKM.
 This certificate must be bitwise identical to the one the TKM trusts (currently
 the TKM only trusts one CA certificate).
 If the trust chain could not be verified, the authorize hook returns failure
 and the authentication of the IKE SA does not succeed.
\end_layout

\begin_layout Standard
The the trust chain verification is successful, the authorize hook retrieves
 the authentication payload stored by the message hook from the keymat and
 passes it to the TKM by using the 
\family typewriter
ike_isa_auth
\family default
 RPC.
 The TKM uses the given certificate context which contains the now trusted
 peer public key to verify the signature.
\end_layout

\begin_layout Subsection
ESP SA event service (EES)
\begin_inset CommandInset label
LatexCommand label
name "sub:charon-EES-Service"

\end_inset


\end_layout

\begin_layout Standard
The ESP SA event service provides the EES interface specified in TODO to
 clients.
 The service is written in Ada but linked into and started alongside the
 charon-tkm daemon.
 It uses the tkm-rpc library outlined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:tkm-rpc-library"

\end_inset

 to implement its RPC interface.
\end_layout

\begin_layout Standard
The EES component accepts ESA acquire and expire events from clients and
 dispatches them into charon by using callbacks written in C.
 The callbacks use the strongSwan hydra kernel interface to initiate an
 acquire or expire event.
 The ESP SA service is used by the xfrm-proxy component to relay messages
 from the kernel's XFRM subsystem to charon.
 This is needed since charon, in this separation secnario, is no longer
 allowed to talk to the kernels IPsec SAD database directly for obvious
 reasons.
\end_layout

\begin_layout Subsection
Exception handler (EH)
\begin_inset CommandInset label
LatexCommand label
name "sub:charon-Exception-handler-(EH)"

\end_inset


\end_layout

\begin_layout Standard
The charon TKM code provides a special exception handler which provides
 the functionality to log exception messages from within Ada code into the
 daemon's logfile.
 This mechanism is implemented using the Exceptions_Actions framework of
 the GNAT Ada runtime.
 An Ada procedure with the correct signature can be registered as handler
 for any exception occurring in the runtime.
 This also includes internal exceptions which are normally not seen by user
 code.
\end_layout

\begin_layout Standard
The registered exception handler calls the imported C function 
\family typewriter
Charon_Terminate
\family default
 which logs the exception message into the daemon's logfile and instructs
 it to terminate.
 
\end_layout

\begin_layout Section
TKM
\end_layout

\begin_layout Section
xfrm-proxy
\end_layout

\begin_layout Standard
The xfrm-proxy component uses the xfrm-ada library (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:xfrm-ada"

\end_inset

) developed in this project to communicate with charon's EES service (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:charon-EES-Service"

\end_inset

).
 See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:XFRM-proxy-architecture"

\end_inset

 for an overview of the proxy architecture.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/xfrm-proxy-arch.svg
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
XFRM proxy architecture
\begin_inset CommandInset label
LatexCommand label
name "fig:XFRM-proxy-architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the kernel stores critical IPsec policies and SA states, the charon
 daemon is no longer allowed to communicate with the kernel XFRM subsystem.
 
\end_layout

\begin_layout Standard
To make rekeying work in such a scenario, kernel XFRM acquire and expire
 messages must be delivered to charon by other means.
 The xfrm-proxy component subscribes to the kernel's XFRM subsystem acquire
 and expire multicast groups to receive events and delivers them to charon
 using the EES service.
 Charon then normally starts create or rekeying jobs for the policy or SA
 in question.
\end_layout

\begin_layout Section
Additional components
\end_layout

\begin_layout Standard
Certain functionality which was needed for the implementation of TKM has
 been realized in self-contained software projects or as extension to existing
 libraries.
\end_layout

\begin_layout Subsection
Anet
\begin_inset CommandInset label
LatexCommand label
name "sub:Anet"

\end_inset


\end_layout

\begin_layout Standard
Anet is a networking library for the Ada programming language.
 It is used by the trusted key manager and xfrm-proxy to open or connect
 to unix sockets and communicate with charon-tkm.
\end_layout

\begin_layout Standard
Anet has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://git.codelabs.ch/?p=anet.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
xfrm-ada
\begin_inset CommandInset label
LatexCommand label
name "sub:xfrm-ada"

\end_inset


\end_layout

\begin_layout Standard
This project is an Ada binding to Linux's XFRM
\begin_inset Index idx
status open

\begin_layout Plain Layout
XFRM
\end_layout

\end_inset

 kernel
\begin_inset Index idx
status open

\begin_layout Plain Layout
kernel
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.kernel.org/
\end_layout

\end_inset


\end_layout

\end_inset

 interface.
 It provides functionality to add and delete XFRM policies and states.
\end_layout

\begin_layout Standard
The xfrm framework is used to implement the IPsec
\begin_inset Index idx
status open

\begin_layout Plain Layout
IPsec
\end_layout

\end_inset

 protocol suite in the Linux kernel.
 The XFRM states operate on the Security Association Database (SAD
\begin_inset Index idx
status open

\begin_layout Plain Layout
SAD
\end_layout

\end_inset

) and the XFRM policies operate on the Security Policy Database (SPD
\begin_inset Index idx
status open

\begin_layout Plain Layout
SPD
\end_layout

\end_inset

).
 Among other features, it provides ESP
\begin_inset Index idx
status open

\begin_layout Plain Layout
ESP
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc4303"

\end_inset

 payload encryption with the key material provided by an userspace application.
\end_layout

\begin_layout Standard
The TKM uses the XFRM interface via the xfrm-ada library, to manage the
 SPD and SAD and provide the keys for ESP encryption to the kernel.
\end_layout

\begin_layout Standard
xfrm-ada has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://git.codelabs.ch/?p=xfrm-ada.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
x509-Ada
\end_layout

\begin_layout Standard
This project is an Ada PKIX X.509 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5280"

\end_inset

 library.
 It provides functionality to process ASN.1/DER-encoded TODO: REF X.680 certificat
es and private keys.
\end_layout

\begin_layout Standard
x509-Ada has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://git.codelabs.ch/?p=x509-ada.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
We have shown that...
\end_layout

\begin_layout Section
Achievements
\end_layout

\begin_layout Section
Future work
\end_layout

\begin_layout Standard
Integration into platform such as Linux containers, SELinux, Qubes OS or
 an SK
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "ike-separation"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
