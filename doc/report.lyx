#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\definecolor{newyellow}{rgb}{1,1,0.8}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "IKE Separation"
\pdf_author "Reto Buerki, Adrian-Ken Rüegsegger"
\pdf_subject "Extraction of security critical components into a Trusted Computing Base (TCB)"
\pdf_keywords "Separation, TCB, IPsec, IKE, IKEv2, Security, Ada"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\listings_params "backgroundcolor={\color{newyellow}},basicstyle={\ttfamily\small},breakautoindent=true,breaklines=true,captionpos=b,commentstyle={\color{colComments}},extendedchars=true,frame=single,identifierstyle={\color{colIdentifier}},keywordstyle={\color{colKeys}},language=Ada,numbers=left,numberstyle={\tiny},showspaces=false,showstringspaces=false,stringstyle={\color{colString}},tabsize=4"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
IKE Separation – Extraction of security critical components into a Trusted
 Computing Base (TCB)
\end_layout

\begin_layout Author
Reto Bürki, Adrian-Ken Rüegsegger
\end_layout

\begin_layout Standard
\align center
University of Applied Sciences Rapperswil (HSR), Switzerland
\end_layout

\begin_layout Abstract
The IPsec protocol relies on the correct operation of the IKE key exchange
 to meet its security goals.
 The implementation of the IKEv2 protocol is a non-trivial task and results
 in a large and complex code base.
 This makes it hard to gain a high degree of confidence in the correct operation
 of the code.
\end_layout

\begin_layout Abstract
The security and robustness of the IKEv2 implementation strongSwan has been
 augmented, by identifying and separating security critical from non-critical
 components and separating them into a minimal TCB.
 The TCB has been implemented using the Ada programming language.
\end_layout

\begin_layout Abstract
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Abstract
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This section provides an overview about the terminology used in this project
 and explains the basic key concepts.
\end_layout

\begin_layout Subsubsection
Trusted Computing Base
\end_layout

\begin_layout Standard
In a system with a high demand for security or integrity, functions relevant
 to guarantee this demand must be isolated from the rest of the system in
 a Trusted Computing Base (TCB)
\begin_inset Index idx
status open

\begin_layout Plain Layout
TCB
\end_layout

\end_inset

.
 To be trusted, this code must be as minimal as possible to allow (formal)
 verification of code correctness.
 In order to isolate code in a TCB, critical sections must be identified
 and the system must be separated into a critical (TCB) and non-critical
 (untrusted) part.
 Communication mechanisms between the sections must be established, which
 itself must be robust and well defined.
\end_layout

\begin_layout Standard
If an attacker is able to compromise the untrusted-part of the system, the
 security and integrity functions guaranteed by the TCB must still be in
 place.
\end_layout

\begin_layout Subsubsection
strongSwan
\begin_inset Index idx
status open

\begin_layout Plain Layout
strongSwan
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The strongSwan project is an OpenSource IPsec-based VPN solution for Unix-like
 operating systems.
 It provides the charon daemon, which is a feature-rich implementation of
 the Internet key exchange protocol version 2 (IKEv2
\begin_inset Index idx
status open

\begin_layout Plain Layout
IKEv2
\end_layout

\end_inset

) as specified in 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

.
 The software is implemented using the C programming language with an object
 oriented (OO) approach.
 This allows to emulate modern programming paradigms while still using a
 standard C compiler and tool set
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.strongswan.org/projects/strongswan/wiki/ObjectOrientedC
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The strongSwan architecture is very flexible and easy to extend with new
 features.
 Almost every part of the daemon works as a plugin and new functionality
 can be added by simply writing a new plugin.
 This architecture proved very helpful in this present project, as very
 few changes were required in the upstream strongSwan code to implement
 the Trusted Key Manager (TKM, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Trusted-Key-Manager"

\end_inset

) architecture.
\end_layout

\begin_layout Subsubsection
Ada
\end_layout

\begin_layout Standard
Ada
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada
\end_layout

\end_inset

 is a structured, strongly typed programming language.
 The language has initially been designed by Jean Ichbiah from Honeywell
 Bull in the 1970s.
 Ada has a very similar structure to Pascal
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pascal
\end_layout

\end_inset

 and is often used for systems with a demand for security and integritiy
 or which have a huge code base.
\end_layout

\begin_layout Standard
The development of Ada was initiated by the US Department of Defense (DoD
\begin_inset Index idx
status open

\begin_layout Plain Layout
DoD
\end_layout

\end_inset

) in order to consolidate and supersede the hundreds of programming languages
 used in their countless projects.
 The new language should comply with all identified DoD requirements (dubbed
 
\begin_inset Quotes eld
\end_inset

Steelman Language Requirements
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Steelman78"

\end_inset

), which focused strongly on security and safety.
 
\end_layout

\begin_layout Standard
Ada was the first standardized high-level programming language 
\begin_inset CommandInset citation
LatexCommand cite
key "Ada83"

\end_inset

.
 The current version is Ada 2005
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada 2005
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:books/sp/Ada2006"

\end_inset

 which supports all modern programming pa\SpecialChar \-
ra\SpecialChar \-
digms.
 The next major version of the language is planned to be complete in 2012
 and will naturally be called Ada 2012
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ada 2012
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Ada compilers, before used in practice, have to pass a standardized test
 suite which guarantees the compliance of the compiler with the Ada standard.
 Since Ada provides many features which aid in the development of safety
 and security critical applications, it is nowadays mostly used in such
 areas where these aspects are important.
 The primary industries making use of Ada are namely avionics, railway systems,
 banking, military and space technology.
\end_layout

\begin_layout Standard
The language is named after Lady Ada Lovelace (1815-1852), the daughter
 of Lord Byron
\begin_inset Foot
status open

\begin_layout Plain Layout
Ada Lovelace - http://en.wikipedia.org/wiki/Ada_Lovelace
\end_layout

\end_inset

 who is considered to be the first computer programmer.
\end_layout

\begin_layout Subsubsection
Trusted Key Manager
\begin_inset CommandInset label
LatexCommand label
name "sub:Trusted-Key-Manager"

\end_inset


\end_layout

\begin_layout Standard
The Trusted Key Manager
\begin_inset Index idx
status open

\begin_layout Plain Layout
Trusted Key Manager
\end_layout

\end_inset

 is a minimal TCB developed during this project which implements the identified
 security-critical functions of the IKEv2 protocol using the Ada programming
 language.
 It uses the Tkm-Rpc library to communicate with the strongSwan charon daemon.
 This library is also written in Ada.
\end_layout

\begin_layout Subsection
Related work
\end_layout

\begin_layout Subsection
Threat model (?)
\end_layout

\begin_layout Standard
It is assumed that charon, which is considered an untrusted software component,
 is under complete control of the attacker.
 This means the attacker has complete access to all data available to the
 IKEv2 daemon and can execute arbitrary code with the privileges of charon.
\end_layout

\begin_layout Section
Requirements
\begin_inset CommandInset label
LatexCommand label
name "sec:Requirements"

\end_inset


\end_layout

\begin_layout Subsection
Security requirements
\begin_inset CommandInset label
LatexCommand label
name "sub:Security-requirements"

\end_inset


\end_layout

\begin_layout Subsubsection
Separation of key material
\begin_inset CommandInset label
LatexCommand label
name "sub:Separation-of-key"

\end_inset


\end_layout

\begin_layout Standard
The untrusted part of the IKEv2 component must not have access to generated
 key material that is used for authentication of peers, encryption and integrity
 protection of user data (child SA keys).
 This also includes critical intermediate values, which may result from
 the key generation and key derivation process.
\end_layout

\begin_layout Standard
TODO: Excluded are IKE keys
\end_layout

\begin_layout Subsubsection
Cryptographic operations
\end_layout

\begin_layout Standard
All relevant cryptographic operations must be performed by the trusted computing
 base (TCB) to assure the correctnes of the resulting values.
 Since key material is needed to perform crypto operations, this is also
 a consequence of the requirement specified in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Separation-of-key"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
The IKEv2 component must only allow IPSec SAs to be established for peers
 that have succesfully been authenticated.
 The authentication must be performed by the TCB to assure the correctnes
 of the process.
\end_layout

\begin_layout Standard
The authentication state in the TCB must always be unambiguously associated
 with the corresponding SA.
\end_layout

\begin_layout Subsubsection
Integrity
\end_layout

\begin_layout Standard
The security of the IKEv2 component must solely depend on the correct operation
 of the trusted part.
 The security operation of the system must not be violated by a misbehaving
 untrusted part.
\end_layout

\begin_layout Subsection
Functional requirements
\end_layout

\begin_layout Subsubsection
Separation
\end_layout

\begin_layout Standard
The IKEv2 component must be separated into a trusted and untrusted part,
 to minimize the size and complexity of the TCB.
 The trusted part must enforce all security requirements specified in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Security-requirements"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Communication
\end_layout

\begin_layout Standard
The communication protocol between the trusted and untrusted parts must
 be simple, robust and well-defined to allow a verifiable implementation.
 
\end_layout

\begin_layout Subsection
Additional requirements
\end_layout

\begin_layout Section
Analysis of strongSwan
\end_layout

\begin_layout Standard
This section describes the current operation of the strongSwan charon IKEv2
 daemon.
 A deep understanding of these mechanisms was a prerequisite before the
 seperation of the daemon in a trusted and unstrusted part to fullfill the
 requirements specified in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Subsection
IKEv2 protocol analysis
\begin_inset CommandInset label
LatexCommand label
name "sub:IKEv2-protocol-analysis"

\end_inset


\end_layout

\begin_layout Standard
The following section provides a detailed analysis of the IKEv2 message
 exchanges (as specified by 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5996"

\end_inset

), focusing on the security relevance of the transmitted data.
\end_layout

\begin_layout Subsection
Code analysis
\begin_inset CommandInset label
LatexCommand label
name "sub:Code-analysis"

\end_inset


\end_layout

\begin_layout Standard
This section illustrates the charon source code, which processes the IKEv2
 message and other security relevant data as described by section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:IKEv2-protocol-analysis"

\end_inset

.
\end_layout

\begin_layout Subsubsection
IKE_SA_INIT
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ike-sa-init.svg
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
IKE SA establishment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
IKE_AUTH
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ike-auth.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA authentication
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
CHILD_CREATE_SA
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/child-create-sa.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Child SA establishment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Source of randmoness
\end_layout

\begin_layout Standard
Randomness is provided by requesting a random number generator plugin instance
 (
\family typewriter
rng_t
\family default
) from the crypto factory of libstrongswan.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/nonce-generation.svg
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Nonce generation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Payload encryption
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/payload-encryption.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA payload encryption
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Payload decryption
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/payload-decryption.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IKE SA payload decryption
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Security-critical functionality
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
The main concept is to separate the security relevant services from all
 other IKEv2 services and split the IKEv2 key management daemon into two
 components: a trusted and an untrusted part.
 The trusted part performs the critical services.
 stores all relevant keying material and exposes the necessary services
 to the untrusted component via a well defined and minial interface.
 The split of the components must guarantee the fullfilment of the security
 requirements defined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Subsection
Split of IKE
\end_layout

\begin_layout Standard
The charon software design is based on a plugin architecture.
 Almost every func- tional part of the daemon is implemented as a plugin.
 This provides the flexibility to extend or exchange specific parts of the
 system.
 As outlined in the code analysis section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Code-analysis"

\end_inset

, most security critical operations and values are already encapsulated
 in plugins.
 The changes needed to allow complete separation of the critical parts from
 the charon daemon are limited.
 Therefore, the architecture depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig-IKE-split"

\end_inset

 is proposed:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/design-overview.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Split of IKE into trusted and untrusted parts
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig-IKE-split"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
By implementing custom plugins which act as proxy between the trusted and
 untrusted parts of the component, it is possible to move the key material
 and related operations into the TCB.
 This ensures that the untrusted part has no direct access to security relevant
 data.
 The critical parts extracted from charon are implemented by the trusted
 key manager which is part of the TCB.
 By using a well-defined interface, the internal functionality of the TCB’s
 key manager is completely hidden from the plugins.
 The plugins reference the data (and their associated state) needed for
 processing via context identifiers.
 They have no diret access to the objects referenced by the identifiers
 but can tell the key manager to perform certain, allowed operations with
 the specified context(s).
 Only uncritical results of operations are returned to the caller plugin
 (e.g.
 public value of a DH exchange).
 This architecure allows the trusted part to be minimal while the bulk of
 the charon code can be used as is, in the untrusted part to handle the
 vast majority of IKEv2 processing.
\end_layout

\begin_layout Subsection
Security goals
\end_layout

\begin_layout Subsubsection
Assumptions
\end_layout

\begin_layout Standard
IKE and TKM can only exchange messages via the well defined interface and
 are otherwise completely isolated from each other.
 In a real system this is very difficult to achieve since there are many
 possibilities for side channels, which have been demonstrated to work,
 see for example 
\begin_inset CommandInset citation
LatexCommand cite
key "cryptoeprint:2010:594"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Zhang:2012:CSC:2382196.2382230"

\end_inset

 or 
\begin_inset CommandInset citation
LatexCommand cite
key "Aciicmez:2007:PSB:1229285.1266999"

\end_inset

.
\end_layout

\begin_layout Subsection
TKM Functionality
\end_layout

\begin_layout Subsubsection
Nonce generation
\end_layout

\begin_layout Subsubsection
Diffie Hellman
\end_layout

\begin_layout Subsubsection
Signature generation
\end_layout

\begin_layout Subsubsection
Signature verification
\end_layout

\begin_layout Subsubsection
Certificate chain validation
\end_layout

\begin_layout Subsubsection
Derivation of key material
\end_layout

\begin_layout Section
TKM interface
\end_layout

\begin_layout Subsection
Protocol overview
\end_layout

\begin_layout Subsubsection
Creation of an IKE SA
\end_layout

\begin_layout Subsubsection
Creation of a Child SA
\end_layout

\begin_layout Subsubsection
Rekeying of an IKE SA
\end_layout

\begin_layout Subsubsection
Rekeying of a Child SA
\end_layout

\begin_layout Subsection
State machines
\end_layout

\begin_layout Subsubsection
Nonce 
\end_layout

\begin_layout Subsubsection
Diffie Hellman
\end_layout

\begin_layout Subsubsection
Certificate chain
\end_layout

\begin_layout Subsubsection
Authenticated endpoint
\end_layout

\begin_layout Subsubsection
IKE SA
\end_layout

\begin_layout Subsubsection
Child SA
\end_layout

\begin_layout Subsection
Exchanges
\end_layout

\begin_layout Subsubsection
nc_create
\end_layout

\begin_layout Subsubsection
...
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
XML-Specification
\end_layout

\begin_layout Standard
How is the protocol between charon and TKM specified? Example section, exchanges
, types etc.
 How is this specification used to create doc/code/fsm/graphs.
 examples
\end_layout

\begin_layout Subsection
Tkm-Rpc
\end_layout

\begin_layout Standard
What is Tkm-Rpc? How is it used by the components? How are the code files
 generated? example code on usage
\end_layout

\begin_layout Subsection
Untrusted component: charon-tkm
\end_layout

\begin_layout Subsubsection
TKM nonce generation plugin
\end_layout

\begin_layout Subsubsection
TKM Diffie Hellman plugin
\end_layout

\begin_layout Subsubsection
TKM private/public key plugin
\end_layout

\begin_layout Subsubsection
TKM keymat plugin
\end_layout

\begin_layout Subsubsection
TKM kernel IPsec interface plugin
\end_layout

\begin_layout Subsubsection
TKM listener plugin
\end_layout

\begin_layout Subsubsection
ESP SA event service (EES)
\end_layout

\begin_layout Subsubsection
Exception handler (EH)
\end_layout

\begin_layout Subsection
Trusted component: TKM
\end_layout

\begin_layout Subsection
xfrm-proxy
\end_layout

\begin_layout Subsection
Additional components
\end_layout

\begin_layout Standard
Certain functionality which was needed for the implementation of TKM has
 been realized in self-contained software projects or as extension to existing
 libraries.
\end_layout

\begin_layout Subsubsection
Anet
\end_layout

\begin_layout Standard
Anet is a networking library for the Ada programming language.
 It is used by the trusted key manager and xfrm-proxy to open or connect
 to unix sockets and communicate with charon-tkm.
\end_layout

\begin_layout Standard
Anet has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://git.codelabs.ch/?p=anet.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
xfrm-ada
\end_layout

\begin_layout Standard
This project is an Ada binding to Linux's XFRM kernel
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.kernel.org/
\end_layout

\end_inset


\end_layout

\end_inset

 interface.
 It provides functionality to add and delete XFRM policies and states.
\end_layout

\begin_layout Standard
The xfrm framework is used to implement the IPsec protocol suite in the
 Linux kernel.
 The XFRM states operate on the Security Association Database (SAD) and
 the XFRM policies operate on the Security Policy Database (SPD).
 Among other features, it provides ESP 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc4303"

\end_inset

 payload encryption with the key material provided by an userspace application.
\end_layout

\begin_layout Standard
The TKM uses the XFRM interface via the xfrm-ada library, to manage the
 SPD and SAD and provide the keys for ESP encryption to the kernel.
\end_layout

\begin_layout Standard
xfrm-ada has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://git.codelabs.ch/?p=xfrm-ada.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
x509-Ada
\end_layout

\begin_layout Standard
This project is an Ada PKIX X.509 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5280"

\end_inset

 library.
 It provides functionality to process ASN.1/DER-encoded TODO: REF X.680 certificat
es and private keys.
\end_layout

\begin_layout Standard
x509-Ada has been released as an opensource project under the GMGPL license
 and is available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://git.codelabs.ch/?p=x509-ada.git
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
We have shown that...
\end_layout

\begin_layout Subsection
Achievements
\end_layout

\begin_layout Subsection
Future work
\end_layout

\begin_layout Standard
Integration into platform such as Linux containers, SELinux, Qubes OS or
 an SK
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "ike-separation"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
